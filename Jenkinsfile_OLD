pipeline {
    agent any 
    tools{
        maven 'M2_HOME'
    }
    environment {
        SCANNER_HOME= tool 'sonar'
        ARTIFACTORY_URL = 'http://ec2-98-80-74-206.compute-1.amazonaws.com:8081/artifactory/geolocation'
        ARTIFACTORY_REPO = 'geolocation'
        RELEASE_VERSION: jun-24-v2
    }

    stages{
        stage('git checkout'){
            steps{
               git branch: 'main', credentialsId: 'GiHubID', \
               url: 'https://github.com/kserge2001/full-devops.git' 
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn clean"
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        
        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
             //   sh "cat trivy-fs-report.html"
            }
        }
        stage('SonarQube Analsyis') {
            steps {
                withSonarQubeEnv('sonarq') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=geo_patient -Dsonar.projectKey=geo_patient \
                            -Dsonar.java.binaries=. '''
                }
            }
        }
      
        stage('Quality Gate') {
            steps {
                script {
                  waitForQualityGate abortPipeline: false, credentialsId: 'Dev-sonarID' 
                }
            }
        }
        
        stage('Build') {
            steps {
               sh "mvn package"
            }
        }
        
        stage('Upload Jar to Jfrog'){
            steps{
                 withCredentials([usernamePassword(credentialsId: 'artifact-jgrogID', \
                 usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                    script {
                        // Define the artifact path and target location
                        def artifactPath = 'target/*.jar'
                        def targetPath = "${ARTIFACTORY_REPO}/release_${BUILD_ID}.jar"

                        // Upload the artifact using curl
                        sh """
                            curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} \
                                 -T ${artifactPath} \
                                 ${ARTIFACTORY_URL}/${targetPath}
                        """
            }
        }
    }

}

     stage('Build Docker Image'){
        steps{
           script{
            sh 'docker build -t hermann90/geo-app-img:latest .' 
           sh 'docker build -t hermann90/geo-app-img:${BUILD_ID} .'
           }
        }
     }
     
     stage('Scan Image'){
        steps{
         sh   'trivy image --format table -o docker_image_report.html kserge2001/geo-app-img:latest'
      //   sh   'trivy image kserge2001/geo-app-img:${BUILD_ID}'
        }
     }
     stage('Test Docker Image'){
        steps{
            sh 'docker rm -f geo-app || echo'
            sh 'docker run --name geo-app --rm -d -p 8000:8082 kserge2001/geo-app-img:latest'
            sh 'sleep 5'
         //   sh 'curl localhost:8000'
            sh 'docker rm -f geo-app || echo ""'
        }
     }
     
     stage('Push Docker Image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'registryID', toolName: 'docker') {
                            sh "docker push kserge2001/geo-app-img:latest"
                            sh 'docker push kserge2001/geo-app-img:${BUILD_ID}'
                            sh 'docker rmi -f kserge2001/geo-app-img:latest kserge2001/geo-app-img:${BUILD_ID}'
                    }
               }
            }
        }
    
     stage('K8s Deployment'){
        steps{ 
        /*
        withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', \
        credentialsId: 'jenkins-k8s-token', namespace: 'dev', restrictKubeConfigAccess: false, \
        serverUrl: 'https://104.237.133.213:6443') {
        */
        withKubeConfig(caCertificate: '', clusterName: \
        'arn:aws:eks:us-east-1:076892551558:cluster/utrains-eks-8w8Vy9', contextName: '',\
         credentialsId: 'eks-qa-ID', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: \
         'https://5F28A52ECE7A9ECB493BBA61A2DB86B9.yl4.us-east-1.eks.amazonaws.com'){ 
        sh "helm install geo geo-app -n dev || helm upgrade geo geo-app -n dev"

}
        }
     }
    }

post {
    always{
      script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
            def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

            def body = """
                <html>
                <body>
                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                <h2>${jobName} - Build ${buildNumber}</h2>
                <div style="background-color: ${bannerColor}; padding: 10px;">
                <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                </div>
                <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                </div>
                </body>
                </html>
            """

            emailext (
                subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                body: body,
                to: 'unixclassd1@gmail.com',
                from: 'jenkins@example.com',
                replyTo: 'jenkins@example.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy-fs-report.html, docker_image_report.html'
            )
        }  
    }
    failure {
        echo 'failed'
    }
    
}      
}